# split=x,
# right_annotation = rowAnnotation(
#   Position = leadpos2color,
#   # col = list(Position = c(Apical = "#FF6D00", Basal = "#E65100", ApicoBasal = "#FFFF00", Medial = "#FFB74D")),
#   col = list(Position = c(Apical = "#E1C62F", Basal = "#FFFF00", ApicoBasal = "#212121", Medial = "#BCAAA4")),
#   annotation_legend_param = list(
#     Position = list(
#       title = "Lead position",
#       labels = c("Apical", "Basal", "Mixed apico-basal", "Others"),
#
#       position = "topleft"
#     )
#   )
# ),
#cluster_columns = cluster_within_group(normalised_ATs,hf2color),
cluster_columns = col_dend,
clustering_distance_columns = "euclidean",
clustering_method_columns = "ward.D2",
#column_dend_reorder = TRUE,
column_names_gp = gpar(col = ifelse(hf2color == "HF", "blue", "red"), fontsize = 18, fontfamily = "Helvetica"),
column_split = col_clusters,
#column_order = get_order(o,2),
# top_annotation = HeatmapAnnotation(
#   LV_mass = anno_barplot(
#     bar_width = 1,
#     height = unit(40,"points"),
#     c(RR_mass2color,HF_mass2color),
#     gp = gpar(fill = colorRampPalette(brewer.pal(n = 9, name = "Purples"))(100))
#     ),
#     show_annotation_name = TRUE,
#   LV_vol = anno_barplot(
#     bar_width = 1,
#     height = unit(40,"points"),
#     c(RR_volume2color,HF_volume2color),
#     gp = gpar(fill = colorRampPalette(brewer.pal(n = 9, name = "Greys"))(100))
#   ),
#   LV_quotient = anno_barplot(
#     bar_width = 1,
#     height = unit(40,"points"),
#     c(RR_quotient,HF_quotient),
#     gp = gpar(fill = colorRampPalette(brewer.pal(n = 9, name = "Purples"))(100))
#   )
# ),
#
show_column_dend = TRUE,
show_row_dend = TRUE,
row_names_gp = gpar(fontsize = 17, fontfamily = "mono",fontface = "bold"),
col = colorRamp2(seq(0, 15, length = 2),c("#EDF8E9", "#005A32")),
na_col = "black",
heatmap_legend_param = list(
title = "AT reduction (%)\n",
legend_height = unit(0.5, "npc"),
grid_width = unit(0.2, "npc"),
title_position = "topleft",
title_gp = gpar(fontsize = 20),
labels_gp = gpar(fontsize = 15)
# LV_mass = list(
#   title = "LV mass (g)",
#   direction = "horizonal"
# )
),
show_heatmap_legend = TRUE,
column_title = plottitle,
column_title_side = "top",
column_title_gp = gpar(fontsize = 30, fontface = "bold", fontfamily = "Helvetica"),
row_title = "\nLead design",
row_title_side = "right",
row_title_gp = gpar(fontsize = 25, fontfamily = "Helvetica"),
width = unit(0.67, "npc"),
height = unit(0.7, "npc"),
row_dend_width = unit(0.1,"npc"),
column_dend_height = unit(0.2, "npc")
)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
corrplot(lr_slope_LV, method = "shade",mar=c(0,0,1.5,0),tl.cex=1.5,cl.cex=1.5,tl.col="black",tl.srt=60, is.corr = FALSE, na.label = '.')
corrplot(corr_RV,"pie",mar=c(0,0,0.25,0),tl.cex=1.5,cl.cex=1.5,tl.col="black",tl.srt=60, is.corr = TRUE)
corr_RV <- sapply(1:ncol(corr_fen_RV), function(i,j) cor(corr_fen_RV[,i], corr_modes[,j]))
corr_fen_RV <- fenotypes_RV[1:19,2:ncol(fenotypes_RV)]
fenotypes_RV <- data.frame("EDP" = rep(NA,length(hearts)),"EDV" = rep(NA,length(hearts)),"ESP" = rep(NA,length(hearts)),"ESV" = rep(NA,length(hearts)),"EF" = rep(NA,length(hearts)),"ET" = rep(NA,length(hearts)), "ICT" = rep(NA,length(hearts)), "IRT" = rep(NA,length(hearts)),"maxdP" = rep(NA,length(hearts)),"mindP" = rep(NA,length(hearts)),"PeakP" = rep(NA,length(hearts)),"SV" = rep(NA,length(hearts)), "Tpeak" = rep(NA,length(hearts)), "Tsys" = rep(NA,length(hearts)))
hearts <- c(paste0("0",c(1:9)),10:39)
fenotypes_RV <- data.frame("EDP" = rep(NA,length(hearts)),"EDV" = rep(NA,length(hearts)),"ESP" = rep(NA,length(hearts)),"ESV" = rep(NA,length(hearts)),"EF" = rep(NA,length(hearts)),"ET" = rep(NA,length(hearts)), "ICT" = rep(NA,length(hearts)), "IRT" = rep(NA,length(hearts)),"maxdP" = rep(NA,length(hearts)),"mindP" = rep(NA,length(hearts)),"PeakP" = rep(NA,length(hearts)),"SV" = rep(NA,length(hearts)), "Tpeak" = rep(NA,length(hearts)), "Tsys" = rep(NA,length(hearts)))
RVapex_UVC <- read.table("/media/crg17/Seagate Backup Plus Drive/CT_cases/forall/RVapex_UVC.dat", row.names=1, quote="\"", comment.char="")
View(RVapex_UVC)
colnames(RVapex_UVC) <- c("Z","RHO","PHI","V")
RVapex_UVC <- read.table("/media/crg17/Seagate Backup Plus Drive/CT_cases/forall/RVapex_UVC.dat", row.names=1, quote="\"", comment.char="")
View(RVapex_UVC)
colnames(RVapex_UVC) <- c("Z","RHO","PHI","V")
View(RVapex_UVC)
boxplot(RVapex_UVC$Z)
boxplot(RVapex_UVC$PHI)
boxplot(RVapex_UVC$PHI/6.24)
boxplot(RVapex_UVC$PHI)
boxplot(RVapex_UVC$Z)
mean(RVapex_UVC$Z)
mean(RVapex_UVC$PHI)
min(RVapex_UVC$Z)
max(RVapex_UVC$Z)
sd(RVapex_UVC$Z)
sd(RVapex_UVC$PHI)
mean(RVapex_UVC$Z)+sd(RVapex_UVC$Z)
mean(RVapex_UVC$Z)-sd(RVapex_UVC$Z)
mean(RVapex_UVC$PHI)-sd(RVapex_UVC$PHI)
mean(RVapex_UVC$PHI)+sd(RVapex_UVC$PHI)
max(RVapex_UVC$Z)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
source('~/Desktop/scripts/multipole/HAC.R')
s1="11000000"
s2="01000001"
s1+s2
s3=s1
source("HAC.R")
merge_design(s1,s2)
source("HAC.R")
s1="11000000"
s2="01000001"
merge_design(s1,s2)
source("HAC.R")
s1="11000000"
s2="01000001"
merge_design(s1,s2)
for(i in s1)
print(s1[i])
s1[1]
s1[1][1]
s1
substr(s1,1)
substr(s1,1,1)
substr(s1,1,2)
substr(s1,2,1)
substr(s1,2,2)
substr(s1,2,3)
s4 <- "12345678"
substr(s4,1,1)
substr(s4,2,1)
substr(s4,2,2)
substr(s4,3,3)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
merge_design("10010101","01000010")
s4
s4 = "12345678"
substr(s4,4,4) <- 'a'
s4
merge_design("10010101","01000010")
x <- merge_design("10010101","01000010")
x
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
merge_design("11000000","00000011")
s2="00000011"
c(1:length(s2))
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
merge_design("11000000","00000011")
s2="101001"
dim(s2)
length(s2)
size(s2)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
merge_design("11000000","00000011")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_monodipoles(version = 1)
find_optimal_monodipoles(version=1,output="number")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_monodipoles(version=1,output="number")
find_optimal_monodipoles(version=1,output="names")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_monodipoles(version=1,output="names")
x <- find_optimal_monodipoles(version=1,output="names")
merge_design(x)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
x <- find_optimal_monodipoles(version=1,output="names")
merge_design(x)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
x <- find_optimal_monodipoles(version=1,output="names")
merge_design(x)
dim(x)
length(x)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
x <- find_optimal_monodipoles(version=1,output="names")
merge_design(x)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
x <- find_optimal_monodipoles(version=1,output="names")
merge_design(x)
x
y<0merge_design(x)
y<-merge_design(x)
y
y=='1'
y[]=='1'
y[y=='1']
str_count
install.packages("stringr")
str_count
str_count()
stringr::str_count()
stringr::str_count()
y
stringr::str_count(y,'1')
y
x
j
j =1
j++
c
j +=1
++j
j
++j
-+j
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole(vein="LA",which_cases = "HF")
bipolar_designs <- find_optimal_monodipoles(vein = vein, response = 100, which_cases = which_cases, version = 1, output = "names")
vein="LA"
which_case ="HF"
bipolar_designs <- find_optimal_monodipoles(vein = vein, response = 100, which_cases = which_cases, version = 1, output = "names")
which_cases ="HF"
bipolar_designs <- find_optimal_monodipoles(vein = vein, response = 100, which_cases = which_cases, version = 1, output = "names")
quadripole <- c()
k <- 1
c(1:length(bipolar_designs)-1)
c(1:(length(bipolar_designs)-1))
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole(vein="LA",which_cases = "HF")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole(vein="LA",which_cases = "HF")
source('~/Desktop/scripts/multipole/HAC.R')
find_optimal_quadripole(vein="LA",which_cases = "HF")
source('~/Desktop/scripts/multipole/HAC.R')
find_optimal_quadripole(vein="LA",which_cases = "HF")
source('~/Desktop/scripts/multipole/HAC.R')
find_optimal_quadripole(vein="LA",which_cases = "HF")
source('~/Desktop/scripts/multipole/HAC.R')
find_optimal_quadripole(vein="LA",which_cases = "HF")
find_optimal_monodipoles(vein = vein, response = 100, which_cases = which_cases, version = 1, output = "names")
find_optimal_monodipoles(vein = "LA", response = 100, which_cases = "HF", version = 1, output = "names")
find_optimal_monodipoles(vein = "LA", response = 100, which_cases = "HF", version = 1, output = "number")
source('~/Desktop/scripts/multipole/HAC.R')
find_optimal_quadripole(vein="LA",which_cases = "HF")
q <- find_optimal_quadripole(vein="LA",which_cases = "HF")
q
unique(q)
vein="LA"
which_cases="HF"
Dupe vfx
find_optimal_monodipoles(vein=vein, reponse=100,which_cases = "HF",version=1,output = "names")
find_optimal_monodipoles(vein=vein, response=100,which_cases = "HF",version=1,output = "names")
find_optimal_quadripole(vein,which_cases)
a<-c(1:3)
b<-a*2
b
a
c <- c(a;b)
c[1,] <- a
c <- c()
c[1,] <- a
c(1,a) <- a
c(1,) <- a
c[1,] <- a
list(a,b)
list(a,b)[1]
list(a,b)[1][1]
list(a,b)[[1]]
find_optimal_monodipoles(vein=vein, response=100,which_cases = "HF",version=1,output = "both")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_monodipoles(vein=vein, response=100,which_cases = "HF",version=1,output = "both")
find_optimal_monodipoles(vein="LA", response=100,which_cases = "HF",version=1,output = "both")
x<-find_optimal_monodipoles(vein="LA", response=100,which_cases = "HF",version=1,output = "both")
y<-x[[2]]
y
df[-1,] - df[-nrow(df),]
df <- y
df[-1,] - df[-nrow(df),]
df[-1] - df[-length(df)]
df[0] - df[-length(df)]
df[1] - df[-length(df)]
df[-1]
c(df[1],df[-1] - df[-length(df)])
df
df[-1,] - df[-nrow(df),]
df[-1,] - df[-nrow(df),]
x<-find_optimal_monodipoles(vein="LA", response=100,which_cases = "HF",version=1,output = "both")
x
scores <- c(x[[2]][1],x[[2]][-1] - x[[2]][-length(x[[2]])])
scores
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole("LA","HF")
q<-find_optimal_quadripole("LA","HF")
q
unique(q)
unique(q[[1]])
tapply(seq_along(vec), vec, identity)[unique]
unique <- unique(q[[1]])
tapply(seq_along(vec), vec, identity)[unique]
tapply(seq_along(q[[1]]), q[[1]], identity)[unique]
q<-find_optimal_quadripole("LA","HF")
q
unique(q[[1]])
x<-find_optimal_monodipoles(vein="LA", response=100,which_cases = "HF",version=1,output = "both")
x
scores <- x[[2]]
scores <- c(scores[1],scores[-1]-scores[-length(scores)])
scores
x <- c(0,0,0)
sum(x)
x[1] <-3
sum(x)
a="110001"
b="110000"
a==b
grepl
grepl(a,b)
a
b
grepl(b,a)
grepl(b,a,fixed = TRUE)
grepl(a,b,fixed = TRUE)
a
b
len(a)
nchar(a)
nchar(n)
nchar(b)
grepl("1+2", "1+2", fixed=TRUE)
grepl("1+2", "1+2as", fixed=TRUE)
grepl("1+2", "1+a2as", fixed=TRUE)
grepl("1+2", "1+a2as", fixed=FALSE)
a=b
a=b
a
b = "110100"
a==b
a!=b
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
check_quadripole_includes_dipole("10011100","10010000")
check_quadripole_includes_dipole("10011100","10100000")
a
b
a = "10001001"
strsplit(a,"")
strsplit(a,"")[[1]]
as.integer(strsplit(a,"")[[1]])
sum(as.integer(strsplit(a,"")[[1]]))
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole("LA","HF")
strsplit(x, "")[[1]]
x = "100011010"
strsplit(x, "")[[1]]
sum(as.integer(strsplit(x, "")[[1]]))
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole("LA","HF")
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole("LA","HF")
warnings()
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
warnings()
source('~/Desktop/scripts/multipole/HAC.R', echo=TRUE)
find_optimal_quadripole("LA","HF")
vein <- "LA"
which_cases <- "HF"
source('./R/HAC.R')
source('./R/HAC.R')
warnings()
install.packages(RColorBrewer)
install.packages('RColorBrewer')
install.packages('pheatmap'); install.packages('d3heatmap'); install.packages('viridis');install.packages('ComplexHeatmap');install.packages('circlize');install.packages('dendextend');install.packages('dendsort');install.packages('seriation');install.packages('ggplot2');install.packages('stringr')
source('./R/compute_EP.R')
Print_QRS(CV_folder='eikonal_default_CV_0.43_nobase',which_cases="HF")
Print_QRS(CV_folder='eikonal_default_nobase',which_cases="HF")
q()
Print_QRS(CV_folder='eikonal_default_0.4_nobase',which_cases="HF")
q()
source('./R/crop_base.R')
source('./R/preprocessing.R')
Create_n_electrodes(heart=1,which_cases="RR",vein="LA")
source('./R/compute_EP.R')
Print_QRS(CV_folder="default_HF",which_cases="h")
Print_QRS(CV_folder="default_HF",which_cases="HF")
source('./R/preprocessing.R')
Crop_base_from_tags(heart=10,which_cases="HF",BiV_name=BiV_FEC_w5_h70_retagged")
Crop_base_from_tags(heart=10,which_cases="HF",BiV_name="BiV_FEC_w5_h70_retagged")
source('./R/preprocessing.R')
CreateMonopoles(which_cases="HF",SA_folder="default_HF",flag_debugging=T)
getwd()
setwd("/home/crg17/Desktop/scripts/multipole/R)
setwd("/home/crg17/Desktop/scripts/multipole/R")
setwd("/home/crg17/Desktop/scripts/multipole/R")
CreateMonopoles(which_cases="HF",SA_folder="default_HF",flag_debugging=T)
source('./run_monopoles.R')
source('./preprocessing.R')
CreateMonopoles(which_cases="HF",SA_folder="default_HF")
CreateMonopoles(which_cases="HF",SA_folder="default_HF",flag_debugging=TRUE)
source('/home/crg17/Desktop/scripts/multipole/R/preprocessing.R')
CreateDipoles(SA_folder='default_HF',which_cases='HF',heart="01")
CreateDipoles(SA_folder='default_HF',which_cases='HF',heart="01",flag_debugging=T)
source('./compute_EP.R')
Write_EP_files(SA_folder="default_HF",which_cases="HF",heart_num="01")
Write_EP_files(SA_folder="default_HF",which_cases="HF",heart_num="02")
source('./compute_EP.R')
CreateDipoles(SA_folder='default_HF',which_cases='HF',heart="01",flag_debugging=T)
source('./compute_EP.R')
Write_EP_files(SA_folder="default_HF",which_cases="HF",heart_num="01",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline("both","dipoles",TRUE)
source('./multipolar_pipeline.R')
Run_pipeline("both","AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline("both","AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline("both","AT_table",flag_debugging=TRUE)
Run_pipeline("both","AT_table",flag_debugging=TRUE)
heart
source('./compute_EP.R')
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="HF",step="monodipoles",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="HF",step="AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="HF",step="AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="HF",step="AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="HF",step="AT_table",flag_debugging=TRUE)
source('./multipolar_pipeline.R')
Run_pipeline(which_cases="both",step="monodipoles",flag_debugging=TRUE)
